# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'arayuz.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt 
import seaborn as sns
from sklearn.metrics import accuracy_score,r2_score,confusion_matrix,classification_report,recall_score,confusion_matrix,mean_squared_error
from sklearn.linear_model import LogisticRegression,LinearRegression
from sklearn.model_selection import train_test_split,KFold,cross_val_score,ShuffleSplit
from sklearn.neighbors import KNeighborsRegressor
from sklearn import preprocessing
import re
from pandas_profiling import ProfileReport
pd.set_option("display.precision", 6)
from sklearn.cluster import KMeans
from sklearn.datasets import make_classification
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.tree import DecisionTreeClassifier
from sklearn import metrics
from copy import deepcopy
import warnings
warnings.filterwarnings("ignore")


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(981, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.datasets = QtWidgets.QComboBox(self.centralwidget)
        self.datasets.setGeometry(QtCore.QRect(40, 40, 241, 51))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.datasets.setFont(font)
        self.datasets.setObjectName("datasets")
        self.datasets.addItem("")
        self.datasets.addItem("")
        self.algoritmalar = QtWidgets.QComboBox(self.centralwidget)
        self.algoritmalar.setGeometry(QtCore.QRect(320, 40, 241, 51))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.algoritmalar.setFont(font)
        self.algoritmalar.setObjectName("algoritmalar")
        self.algoritmalar.addItem("")
        self.algoritmalar.addItem("")
        self.algoritmalar.addItem("")
        self.algoritmalar.addItem("")
        self.yuzdelik = QtWidgets.QSlider(self.centralwidget)
        self.yuzdelik.setGeometry(QtCore.QRect(600, 50, 221, 31))
        self.yuzdelik.setMinimum(1)
        self.yuzdelik.setMaximum(99)
        self.yuzdelik.setOrientation(QtCore.Qt.Horizontal)
        self.yuzdelik.setObjectName("yuzdelik")
        self.submit = QtWidgets.QPushButton(self.centralwidget)
        self.submit.setGeometry(QtCore.QRect(860, 50, 81, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.submit.setFont(font)
        self.submit.setObjectName("submit")
        self.trainLabel = QtWidgets.QLabel(self.centralwidget)
        self.trainLabel.setGeometry(QtCore.QRect(590, 90, 47, 13))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.trainLabel.setFont(font)
        self.trainLabel.setObjectName("trainLabel")
        self.testLabel = QtWidgets.QLabel(self.centralwidget)
        self.testLabel.setGeometry(QtCore.QRect(800, 90, 47, 13))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.testLabel.setFont(font)
        self.testLabel.setObjectName("testLabel")
        self.trainYuzde = QtWidgets.QLabel(self.centralwidget)
        self.trainYuzde.setGeometry(QtCore.QRect(600, 30, 47, 13))
        self.trainYuzde.setObjectName("trainYuzde")
        self.testYuzde = QtWidgets.QLabel(self.centralwidget)
        self.testYuzde.setGeometry(QtCore.QRect(810, 30, 47, 13))
        self.testYuzde.setObjectName("testYuzde")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 981, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        #####################################################################
        self.accur = QtWidgets.QLabel(self.centralwidget)
        self.accur.setGeometry(QtCore.QRect(40, 100, 250, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.accur.setFont(font)
        self.accur.setObjectName("accur")
        
        self.conf = QtWidgets.QLabel(self.centralwidget)
        self.conf.setGeometry(QtCore.QRect(40, 150, 250, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.conf.setFont(font)
        self.conf.setObjectName("conf")
        
        self.clsreport = QtWidgets.QLabel(self.centralwidget)
        self.clsreport.setGeometry(QtCore.QRect(320, 150, 250, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.clsreport.setFont(font)
        self.clsreport.setObjectName("clsreport")
        
        self.confresult = QtWidgets.QLabel(self.centralwidget)
        self.confresult.setGeometry(QtCore.QRect(40, 200, 47, 13))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.confresult.setFont(font)
        self.confresult.setObjectName("confresult")
        
        self.clsreportresult = QtWidgets.QLabel(self.centralwidget)
        self.clsreportresult.setGeometry(QtCore.QRect(320, 200, 47, 13))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.clsreportresult.setFont(font)
        self.clsreportresult.setObjectName("clsreportresult")
        
        
        self.yuzdelik.valueChanged.connect(self.slide_rate)
        self.submit.clicked.connect(self.pressed)
        
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.datasets.setItemText(0, _translate("MainWindow", "Jan_2019_ontime.csv"))
        self.datasets.setItemText(1, _translate("MainWindow", "Jan_2020_ontime.csv"))
        self.algoritmalar.setItemText(0, _translate("MainWindow", "Decision Tree"))
        self.algoritmalar.setItemText(1, _translate("MainWindow", "KNN"))
        self.algoritmalar.setItemText(2, _translate("MainWindow", "Naive Bayes"))
        self.algoritmalar.setItemText(3, _translate("MainWindow", "K-Means"))
        self.submit.setText(_translate("MainWindow", "Submit"))
        self.trainLabel.setText(_translate("MainWindow", "Train"))
        self.testLabel.setText(_translate("MainWindow", "Test"))
        self.trainYuzde.setText(_translate("MainWindow", "%1"))
        self.testYuzde.setText(_translate("MainWindow", "%99"))
        self.conf.setText(_translate("MainWindow", "Confusion Matrix:"))
        self.clsreport.setText(_translate("MainWindow", "Classification Report:"))
        self.accur.setText(_translate("MainWindow", "Accuracy:"))
        self.confresult.setText(_translate("MainWindow", ""))
        self.clsreportresult.setText(_translate("MainWindow", ""))
        
        
    def slide_rate(self):
        train_rate = int(self.yuzdelik.value())
        
        self.trainYuzde.setText("%"+str(train_rate))
        self.testYuzde.setText("%"+str(100-train_rate))
        
    def pressed(self):
        train_rate = int(self.yuzdelik.value())
        dataset = self.datasets.currentText()
        algo = self.algoritmalar.currentText()
        # self.label.setText(dataset + ", " + algo + ", " + str(train_rate))
        # self.label.adjustSize()
        self.sonuc(train_rate, dataset, algo)
        
        
    def sonuc(self, train_rate, dataset, algo):
        df = pd.read_csv(dataset)

        data = df.drop(['OP_UNIQUE_CARRIER','OP_CARRIER_AIRLINE_ID','OP_CARRIER','TAIL_NUM', 'ORIGIN_AIRPORT_ID','ORIGIN_AIRPORT_SEQ_ID','DEST_AIRPORT_ID','DEST_AIRPORT_SEQ_ID','Unnamed: 21'], axis=1)
        data = data.set_index('OP_CARRIER_FL_NUM')
        data.drop_duplicates(inplace=True)

        data.dropna(inplace=True) #null degerler droplaniyo
        data.isna().any()

        data.isna().sum()

        data.duplicated().sum()

        #kategorik degerler label encoder ile sayisal degerlere cevrilir
        def encode_categories(features):
            lb_make = preprocessing.LabelEncoder()
            for i in range(len(features)):
                data[features[i]] = lb_make.fit_transform(data[features[i]])

        encode_categories(['ORIGIN' , 'DEST' , 'DEP_TIME_BLK'])

        x = data.drop('ARR_DEL15',axis=1)
        y = data['ARR_DEL15']
        x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = (100-train_rate)/100)
        
        models = []
        models.append(('Naive Bayes', GaussianNB()))
        models.append(('Decision Tree', DecisionTreeClassifier()))

        # k_range = range(1,6)
        # kscore = []
        # max = 0
        # max_x_train = ()
        # max_y_train = ()
        # max_x_test = ()
        # max_x_test = ()
        # number = 0

        # for k in k_range:
        #     knn = KNeighborsClassifier(n_neighbors = k)
        #     knn.fit(x_train, y_train)
        #     kscore.append(knn.score(x_test, y_test))
            
        #     prediction = knn.predict(x_test)
        #     accuracy = accuracy_score(y_test, prediction)
            
        #     if accuracy > max:
        #         max = accuracy
        #         max_knn = deepcopy(knn)
        #         max_x_train = deepcopy(x_train)
        #         max_y_train = deepcopy(y_train)
        #         max_x_test = deepcopy(x_test)
        #         max_y_test = deepcopy(y_test)
        #         number = k
                
        models.append(('KNN', KNeighborsClassifier(n_neighbors = 1)))
        
        # plt.figure()
        # plt.xlabel('Komşu Sayısı')
        # plt.ylabel('Accuracy')
        # plt.scatter(k_range, kscore)
        # plt.xticks(range(1,6))
        # plt.show()

        # k_range = range(1,6)
        # kscore = []
        # max = 0
        # max_x_train = ()
        # max_y_train = ()
        # max_x_test = ()
        # max_x_test = ()
        # number = 0

        # for k in k_range:
        #     kmeans = KMeans(n_clusters=k)
        #     kmeans.fit(x_train, y_train)
        #     kscore.append(kmeans.score(x_test, y_test))
            
        #     prediction = kmeans.predict(x_test)
        #     accuracy = accuracy_score(y_test, prediction)
            
        #     if accuracy > max:
        #         max = accuracy
        #         max_kmeans = deepcopy(kmeans)
        #         max_x_train = deepcopy(x_train)
        #         max_y_train = deepcopy(y_train)
        #         max_x_test = deepcopy(x_test)
        #         max_y_test = deepcopy(y_test)
        #         number = k
                
        models.append(('K-Means', KMeans(n_clusters = 1)))

        from sklearn import metrics
        for name, model in models:
            
            if name == algo:
                # print(name)
                
                trained_model = model.fit(x_train, y_train)
                    
                predictions = trained_model.predict(x_test) 
                
                # print(f"test score: {accuracy_score(predictions,y_test)}\n")
                self.accur.setText("Accuracy: " + str(accuracy_score(predictions,y_test)))
                matrix = metrics.confusion_matrix(y_test, predictions)
                self.confresult.setText(str(matrix))
                self.confresult.adjustSize()
                # print(matrix)
                # print("\n")
                report=metrics.classification_report(y_test, predictions)
                self.clsreportresult.setText(str(report))
                self.clsreportresult.adjustSize()
                self.clsreportresult.setAlignment(QtCore.Qt.AlignRight)
                print(report)
                # print("\n")
                


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
